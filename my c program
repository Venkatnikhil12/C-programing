#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_EMPLOYEES 100  // Preprocessor Directive

// Structure for storing employee details
typedef struct {
    int id;
    char name[50];
    float salary;
} Employee;

// Function Prototypes
void addEmployee(Employee *employees, int *count);
void displayEmployees(const Employee *employees, int count);
void saveToFile(const Employee *employees, int count, const char *filename);
void loadFromFile(Employee *employees, int *count, const char *filename);
int findEmployeeByID(const Employee *employees, int count, int id);
void deleteEmployee(Employee *employees, int *count, int id);

// Main function
int main() {
    Employee *employees = (Employee *)malloc(MAX_EMPLOYEES * sizeof(Employee)); // Dynamic Memory Allocation
    int count = 0;
    int choice;
    
    loadFromFile(employees, &count, "employees.txt"); // Load data from file if exists

    do {
        printf("\nEmployee Management System\n");
        printf("1. Add Employee\n");
        printf("2. Display All Employees\n");
        printf("3. Delete Employee by ID\n");
        printf("4. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addEmployee(employees, &count);
                break;
            case 2:
                displayEmployees(employees, count);
                break;
            case 3: {
                int id;
                printf("Enter Employee ID to delete: ");
                scanf("%d", &id);
                deleteEmployee(employees, &count, id);
                break;
            }
            case 4:
                saveToFile(employees, count, "employees.txt");
                printf("Data saved. Exiting...\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }
    } while (choice != 4);

    free(employees); // Free dynamically allocated memory
    return 0;
}

// Function to add an employee
void addEmployee(Employee *employees, int *count) {
    if (*count >= MAX_EMPLOYEES) {
        printf("Cannot add more employees!\n");
        return;
    }
    Employee e;
    e.id = *count + 1;
    printf("Enter name: ");
    scanf(" %[^\n]", e.name);  // Input with spaces
    printf("Enter salary: ");
    scanf("%f", &e.salary);

    employees[*count] = e;
    (*count)++;
    printf("Employee added successfully!\n");
}

// Function to display all employees
void displayEmployees(const Employee *employees, int count) {
    printf("\nEmployee List:\n");
    for (int i = 0; i < count; i++) {
        printf("ID: %d, Name: %s, Salary: %.2f\n", employees[i].id, employees[i].name, employees[i].salary);
    }
}

// Function to save employee data to a file
void saveToFile(const Employee *employees, int count, const char *filename) {
    FILE *file = fopen(filename, "w");  // File I/O
    if (file == NULL) {
        printf("Could not open file for saving.\n");
        return;
    }
    for (int i = 0; i < count; i++) {
        fprintf(file, "%d %s %.2f\n", employees[i].id, employees[i].name, employees[i].salary);
    }
    fclose(file);
}

// Function to load employee data from a file
void loadFromFile(Employee *employees, int *count, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) return;  // No file found

    while (fscanf(file, "%d %49s %f", &employees[*count].id, employees[*count].name, &employees[*count].salary) == 3) {
        (*count)++;
    }
    fclose(file);
}

// Function to find an employee by ID
int findEmployeeByID(const Employee *employees, int count, int id) {
    for (int i = 0; i < count; i++) {
        if (employees[i].id == id) return i;
    }
    return -1;
}

// Function to delete an employee by ID
void deleteEmployee(Employee *employees, int *count, int id) {
    int index = findEmployeeByID(employees, *count, id);
    if (index == -1) {
        printf("Employee not found!\n");
        return;
    }

    for (int i = index; i < *count - 1; i++) {
        employees[i] = employees[i + 1];
    }
    (*count)--;
    printf("Employee deleted successfully!\n");
}